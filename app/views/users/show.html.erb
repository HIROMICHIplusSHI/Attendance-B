<% provide(:title, @user.name) %>
<div>
  <!-- クローン元完全再現：2行×4列ユーザー情報テーブル -->
  <table class="table table-bordered table-condensed user-table">
    <tr>
      <td>
        <%= link_to "⇦", user_path(date: @first_day.prev_month), class: "btn btn-info btn-sm", style: "margin-right: 10px;" %>
        <%= @first_day.present? ? l(@first_day, format: :middle) : "日付取得エラー" %> 時間管理表
        <%= link_to "⇨", user_path(date: @first_day.next_month), class: "btn btn-info btn-sm", style: "margin-left: 10px;" %>
      </td>
      <td>指定勤務時間：<%= format_basic_info(@user.work_time) %></td>
      <td>基本時間：<%= format_basic_info(@user.basic_time) %></td>
      <td>月初日：<%= @first_day.present? ? l(@first_day, format: :short) : "なし" %></td>
    </tr>

    <tr>
      <td>所属：<%= @user.department.present? ? @user.department : "未所属" %></td>
      <td>名前：<%= @user.name %></td>
      <td>出勤日数：<%= @worked_sum %>日</td>
      <td>月末日：<%= @last_day.present? ? l(@last_day, format: :short) : "なし" %></td>
    </tr>
  </table>
</div>

<!-- 1ヶ月の勤怠編集ボタン（ユーザー情報テーブル下） -->
<div class="btn-users-show">
  <%= link_to "1ヶ月の勤怠編集へ", edit_one_month_user_attendances_path(@user, date: @first_day), class: "btn btn-success", data: { turbo: false } %>
  <% if current_user.admin? %>
    <%= link_to "基本情報編集", "#",
        class: "btn btn-primary",
        id: "basic-info-edit-btn",
        data: {
          url: edit_basic_info_user_path(@user)
        } %>
  <% end %>
</div>

<!-- モーダルコンテナ -->
<div id="basic-info-modal" class="modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 1050; background-color: rgba(0,0,0,0.3);">
  <div class="modal-dialog" style="position: relative; width: auto; margin: 10px auto; max-width: 600px; top: 50%; transform: translateY(-50%);">
    <div class="modal-content" style="box-shadow: 0 5px 15px rgba(0,0,0,0.5);">
      <!-- モーダルコンテンツはJavaScriptで挿入 -->
    </div>
  </div>
</div>

<!-- 基本情報編集モーダル用JavaScript -->
<script>
// Turbo対応の基本情報モーダル初期化関数
function initializeBasicInfoModal() {
  console.log('基本情報編集モーダルJavaScript初期化開始');

  const editBtn = document.getElementById('basic-info-edit-btn');
  const modal = document.getElementById('basic-info-modal');

  if (editBtn) {
    // 既存のリスナーを削除してから新しいリスナーを追加
    editBtn.removeEventListener('click', handleModalClick);
    editBtn.addEventListener('click', handleModalClick);
  }

  // モーダル背景クリックで閉じる
  if (modal) {
    modal.removeEventListener('click', handleModalBackgroundClick);
    modal.addEventListener('click', handleModalBackgroundClick);
  }

  console.log('基本情報編集モーダルJavaScript初期化完了');
}

function handleModalClick(e) {
  e.preventDefault();
  console.log('基本情報編集ボタンがクリックされました');
  openModal();
}

function handleModalBackgroundClick(e) {
  const modal = document.getElementById('basic-info-modal');
  if (e.target === modal) {
    closeModal();
  }
}

function openModal() {
  console.log('openModal関数実行開始');
  const editBtn = document.getElementById('basic-info-edit-btn');
  const modal = document.getElementById('basic-info-modal');
  const modalContent = modal.querySelector('.modal-content');
  const url = editBtn.dataset.url;

  console.log('取得URL:', url);

  // CSRFトークンを取得
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

  // AJAXでモーダルコンテンツを取得
  fetch(url, {
    headers: {
      'Accept': 'text/html',
      'X-Requested-With': 'XMLHttpRequest',
      'X-CSRF-Token': csrfToken
    }
  })
  .then(response => {
    console.log('レスポンス受信:', response.status);
    return response.text();
  })
  .then(html => {
    console.log('HTML取得成功');
    modalContent.innerHTML = html;
    modal.style.display = 'block';

    // フォーム送信を処理
    const form = modalContent.querySelector('form');
    if (form) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        submitModalForm(form);
      });
    }

    // モーダル内の閉じるボタンを処理
    const closeBtn = modalContent.querySelector('.btn-close, [data-dismiss="modal"]');
    if (closeBtn) {
      closeBtn.addEventListener('click', function(e) {
        e.preventDefault();
        closeModal();
      });
    }
  })
  .catch(error => {
    console.error('モーダル読み込みエラー:', error);
  });
}

function closeModal() {
  console.log('モーダルを閉じています');
  const modal = document.getElementById('basic-info-modal');
  modal.style.display = 'none';
  modal.querySelector('.modal-content').innerHTML = '';
}

function submitModalForm(form) {
  console.log('フォーム送信開始');
  const formData = new FormData(form);
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

  fetch(form.action, {
    method: form.method || 'POST',
    body: formData,
    headers: {
      'X-Requested-With': 'XMLHttpRequest',
      'X-CSRF-Token': csrfToken,
      'Accept': 'application/json'
    }
  })
  .then(response => {
    console.log('フォーム送信レスポンス:', response.status);
    if (response.ok) {
      return response.json().then(data => {
        console.log('送信成功 - JSON レスポンス:', data);
        closeModal();

        // フラッシュメッセージを表示
        if (data.message) {
          showFlashMessage(data.status, data.message);
        }

        // ページリロード
        if (window.Turbo) {
          window.Turbo.visit(window.location.href);
        } else {
          window.location.reload();
        }
      });
    } else {
      console.log('エラー - モーダル更新');
      return response.text().then(html => {
        const modal = document.getElementById('basic-info-modal');
        const modalContent = modal.querySelector('.modal-content');
        modalContent.innerHTML = html;

        // 再度フォーム送信イベントを設定
        const newForm = modalContent.querySelector('form');
        if (newForm) {
          newForm.addEventListener('submit', function(e) {
            e.preventDefault();
            submitModalForm(newForm);
          });
        }

        // 再度閉じるボタンを設定
        const closeBtn = modalContent.querySelector('.btn-close, [data-dismiss="modal"]');
        if (closeBtn) {
          closeBtn.addEventListener('click', function(e) {
            e.preventDefault();
            closeModal();
          });
        }
      });
    }
  })
  .catch(error => {
    console.error('フォーム送信エラー:', error);
  });
}

// フラッシュメッセージを表示する関数
function showFlashMessage(type, message) {
  console.log('フラッシュメッセージ表示:', type, message);

  // 既存のフラッシュメッセージを削除
  const existingFlash = document.querySelector('.alert');
  if (existingFlash) {
    existingFlash.remove();
  }

  // 新しいフラッシュメッセージを作成
  const flashDiv = document.createElement('div');
  flashDiv.className = `alert alert-${type === 'success' ? 'info' : type}`;
  flashDiv.textContent = message;
  flashDiv.style.marginBottom = '20px';

  // フラッシュメッセージコンテナに挿入
  const flashContainer = document.getElementById('flash');
  if (flashContainer) {
    flashContainer.appendChild(flashDiv);

    // 5秒後に自動で消去
    setTimeout(() => {
      if (flashDiv.parentNode) {
        flashDiv.remove();
      }
    }, 5000);
  }
}

// Turboイベントでの初期化
document.addEventListener('turbo:load', function() {
  initializeBasicInfoModal();
});

// 初回読み込み時の初期化（Turboが無効な場合の備え）
document.addEventListener('DOMContentLoaded', function() {
  initializeBasicInfoModal();
});

// グローバルに公開（デバッグ用）
window.closeModal = closeModal;
</script>

<div>

<div>
  <!-- クローン元完全再現：7列シンプル勤怠テーブル -->
  <table class="table table-bordered table-condensed table-hover text-center" id="table-attendances">
    <thead>
      <tr>
        <th class="text-center">日付</th>
        <th class="text-center">曜日</th>
        <th class="text-center">勤怠登録</th>
        <th class="text-center">出勤時間</th>
        <th class="text-center">退勤時間</th>
        <th class="text-center">在社時間</th>
        <th class="text-center">備考</th>
      </tr>
    </thead>
    <tbody>
      <% @attendances.each do |day| %>
      <tr>
        <td class="text-center"><%= l(day.worked_on, format: :short) %></td>
        <td class="text-center
          <%= 'text-primary' if day.worked_on.wday == 6 %>
          <%= 'text-danger' if day.worked_on.wday == 0 %>">
          <%= ApplicationController::DAYS_OF_THE_WEEK[day.worked_on.wday] %>
        </td>
        <td class="text-center">
        <% if btn_text = attendance_state(day) %>
          <%= button_to "#{btn_text}登録", user_attendance_path(@user, day),
            method: :patch,
            params: { attendance: { "#{btn_text == '出勤' ? 'started_at' : 'finished_at'}" => Time.current.strftime("%H:%M") } },
            class: "btn btn-primary btn-attendance",
            form_class: "d-inline" %>
        <% end %>
        </td>
        <td class="text-center"><%= format_time_15min(day.started_at) if day.started_at.present? %></td>
        <td class="text-center"><%= format_time_15min(day.finished_at) if day.finished_at.present? %></td>
        <td class="text-center">
          <% if day.started_at.present? && day.finished_at.present? %>
            <%= working_times(day.started_at, day.finished_at) %>
          <% end %>
        </td>
        <td class="text-center"><%= day.note %></td>
      </tr>
      <% end %>
    </tbody>
    <!-- クローン元完全再現：統計フッター -->
    <tfoot>
      <tr>
        <td colspan="2" class="text-center">累計日数</td>
        <td colspan="2" class="text-center">総合勤務時間</td>
        <td colspan="2" class="text-center">累計在社時間</td>
        <td rowspan="2" class="text-center"></td>
      </tr>
      <tr>
        <td colspan="2" class="text-center"><%= @attendances.count %></td>
        <td colspan="2" class="text-center"><%= format_basic_info(@user.work_time).to_f * @worked_sum %></td>
        <td colspan="2" class="text-center">
          <% @total_working_times = @total_working_times.to_f %>
          <% @attendances.each do |day| %>
            <% if day.started_at.present? && day.finished_at.present? %>
              <% @total_working_times += working_times(day.started_at, day.finished_at).to_f %>
            <% end %>
          <% end %>
          <%= format("%.2f", @total_working_times) %>
        </td>
      </tr>
    </tfoot>
  </table>
</div>

<!-- 土日色分けスタイル -->
<style>
/* 土曜日のスタイル（青系） */
#table-attendances tr:has(.text-primary) {
  background-color: #f0f8ff;
}

/* 日曜日のスタイル（赤系） */
#table-attendances tr:has(.text-danger) {
  background-color: #fff5f5;
}
</style>